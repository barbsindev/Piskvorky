{"version":3,"sources":["Game.tsx"],"names":["react_1","require","react_native_1","Circle_1","Cross_1","Wrapper_1","react_native_gesture_handler_1","winningPattern","currentPlayer","Cross","containsAny","source","target","filter","item","indexOf","length","Game","_a","route","id","_b","useState","clickedBoxes","setClickedBoxes","useEffect","console","log","checker","arr","every","v","includes","forEach","element","index","Alert","alert","filledArray","Array","fill","map","box","createElement","TouchableWithoutFeedback","onPress","__spreadArrays","handleEvent","View","style","styles","key","ScrollView","flex","Button","title","exports","StyleSheet","create","display","flexDirection","flexWrap","justifyContent","width","height","borderWidth","borderColor","alignItems","player","padding","fontSize","fontWeight","icon","position","bottom","right","color"],"mappings":"uQAAA,IAAAA,QAAAC,QAAA,SACAC,eAAAD,QAAA,gBAGAE,SAAAF,QAAA,YACAG,QAAAH,QAAA,WAEAI,UAAAJ,QAAA,yBACAK,+BAAAL,QAAA,gCAKMM,eAAiB,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAELC,cAAgB,CAACC,MAAKL,QAAA,SAE1B,SAASM,YAAYC,EAAQC,GAI3B,OAAuB,EAHVD,EAAOE,OAAO,SAAUC,GACnC,OAA+B,EAAxBF,EAAOG,QAAQD,KAEVE,OAGhB,SAAwBC,KAAKC,GAACA,EAAAC,MAAOD,EAAAE,OAC7BC,EAAArB,QAAAsB,SAAA,IAACC,EAAAF,EAAA,GAAcG,EAAAH,EAAA,GAErBrB,QAAAyB,UAAU,WAERC,QAAQC,IAAIpB,eAAe,GAAIgB,GAIjB,SAAVK,EAAWC,EAAKjB,GAAW,OAAAA,EAAOkB,MAAM,SAAAC,GAAK,OAAAF,EAAIG,SAASD,KAO9DxB,eAAe0B,QAAQ,SAACC,EAASC,GAE/BT,QAAQC,IAAIO,EAAS,OACrBR,QAAQC,IAAIC,EAAQL,EAAchB,eAAe4B,MACI,IAAjDP,EAAQL,EAAchB,eAAe4B,KACvCjC,eAAAkC,MAAMC,MAAM,aAAc,YAE5BX,QAAQC,IAAI,yBASa,GAAvBJ,EAAaP,QACfU,QAAQC,IAAI,SAOdD,QAAQC,IAAIJ,IACX,CAACA,IAcJ,IAAMe,EAAc,IAAIC,MAAM,GAAGC,KAAK,MAAMC,IAAI,SAACC,EAAKP,GAAU,OAC9DnC,QAAA,QAAA2C,cAACrC,+BAAAsC,yBAAwB,CAACC,QAAS,WAAM,OAbvB,SAAAV,GACdZ,EAAaS,SAASG,IAKxBX,EAAgB,SAAAD,GAAgB,OAAAuB,eAAIvB,EAAY,CAAEY,MAOXY,CAAYZ,KACnDnC,QAAA,QAAA2C,cAACzC,eAAA8C,KAAI,CAACC,MAAOC,OAAOR,IAAKS,IAAKT,GAC3BnB,EAAaS,SAASG,IAAUnC,QAAA,QAAA2C,cAACvC,QAAA,QAAK,UAO7C,OACEJ,QAAA,QAAA2C,cAACrC,+BAAA8C,WAAU,KACTpD,QAAA,QAAA2C,cAACtC,UAAA,QAAO,CAACgD,KAAM,GAEbrD,QAAA,QAAA2C,cAACzC,eAAA8C,KAAI,CAACC,MAAOC,OAAOG,MAAOf,IAI7BtC,QAAA,QAAA2C,cAACzC,eAAAoD,OAAM,CAACC,MAAM,QAAQV,QAAS,WAAM,OAAArB,EAAgB,QAzE3DgC,QAAA,QAAAvC,KA8EA,IAAMiC,OAAShD,eAAAuD,WAAWC,OAAO,CAC/BL,KAAM,CACJM,QAAS,OACTC,cAAe,MACfC,SAAU,OACVC,eAAgB,UAElBpB,IAAK,CACHqB,MAAO,IACPC,OAAQ,IACRC,YAAa,EACbC,YAAa,QACbC,WAAY,SACZL,eAAgB,UAElBM,OAAQ,CACNC,QAAS,GACTC,SAAU,GACVC,WAAY,QAEdC,KAAM,CACJC,SAAU,WACVC,OAAQ,EACRC,MAAO,EACPC,MAAO","file":"Game.min.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {StyleSheet, View, Button, Alert} from 'react-native';\nimport {FontAwesomeIcon} from '@fortawesome/react-native-fontawesome';\nimport {faComment} from '@fortawesome/free-solid-svg-icons';\nimport Circle from './Circle';\nimport Cross from './Cross';\nimport Chat from './Chat/Chat';\nimport Wrapper from '../components/Wrapper';\nimport {\n  ScrollView,\n  TouchableWithoutFeedback,\n} from 'react-native-gesture-handler';\n\nconst winningPattern = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\nlet currentPlayer = {Cross};\n\nfunction containsAny(source, target) {\n  var result = source.filter(function (item) {\n    return target.indexOf(item) > -1;\n  });\n  return result.length > 0;\n}\n\nexport default function Game({route, id}) {\n  const [clickedBoxes, setClickedBoxes] = useState([]);\n\n  useEffect(() => {\n    // log if you have 3 or more clicked boxes\n    console.log(winningPattern[0], clickedBoxes);\n\n    // checks weather our clicked boxes array Contains ANY of the winning patterns\n    // eg if we have created a winning poattern on the game board\n    let checker = (arr, target) => target.every(v => arr.includes(v));\n    // if ( true) {\n    //   Alert.alert('Alert Title', 'My Alert Msg');\n    // }\n    // loops through EACH element in our winning pattern array one by one\n    // eg [0,1,2], [0,3,6]\n    // if our clicked boxes arr has any of the winning pattens we get a TRUE else a FALSE\n    winningPattern.forEach((element, index) => {\n      // inedex is the number of the array item we are looping though -- starts at 0, ends at 8\n      console.log(element, 'frr');\n      console.log(checker(clickedBoxes, winningPattern[index]));\n      if (checker(clickedBoxes, winningPattern[index]) === true) {\n        Alert.alert('Game Over!', 'You Won!');\n      }\n      console.log('checker func called');\n    });\n\n    // winningPattern.every((item) => {\n    //   console.log(item, 'i');\n    //   if (item.includes(clickedBoxes)) {\n    //     console.log('yay');\n    //   }\n    // });\n    if (clickedBoxes.length >= 3) {\n      console.log('array');\n    }\n\n    // check wehther your clickedboxes array contains ALL 3 numbers in winningPattern[0],[1],[2]ect\n    // if your arr does u WIN\n    // if your arr doesnt you are yet to win\n    // you will need some kind of loop - to loop though winningPattern[0],[1]etc and check agaist your array\n    console.log(clickedBoxes);\n  }, [clickedBoxes]);\n\n  const handleEvent = index => {\n    if (clickedBoxes.includes(index)) {\n      // do nothing, we dont want to add a number that already esists in  the array to the array again\n      return;\n    } else {\n      // the index/boxnumber isnt already in the array so we want to add to array\n      setClickedBoxes(clickedBoxes => [...clickedBoxes, index]);\n    }\n  };\n  function handlePlayerChange() {\n    currentPlayer = currentPlayer === {Cross} ? {Circle} : {Cross};\n  }\n  const filledArray = new Array(9).fill(null).map((box, index) => (\n    <TouchableWithoutFeedback onPress={() => handleEvent(index)}>\n      <View style={styles.box} key={box}>\n        {clickedBoxes.includes(index) && <Cross />}\n      </View>\n    </TouchableWithoutFeedback>\n  ));\n\n  // console.log(filledArray);\n\n  return (\n    <ScrollView>\n      <Wrapper flex={1}>\n        {/* <Box /> */}\n        <View style={styles.flex}>{filledArray}</View>\n        {/* <FontAwesomeIcon icon={faComment} size={70} style={styles.icon} />\n        <Chat boxClicked={'a3'} /> */}\n      </Wrapper>\n      <Button title=\"Reset\" onPress={() => setClickedBoxes([])}></Button>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  flex: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 100,\n    height: 100,\n    borderWidth: 1,\n    borderColor: 'black',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  player: {\n    padding: 20,\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  icon: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    color: '#27bdac',\n  },\n});\n"]}